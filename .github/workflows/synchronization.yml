#
# 同步上游仓库或者清理发布都需要用REPO_TOKEN密匙
#
# 记住，同步上游是不会同步您任何自建文件夹的，所以同步后您要自己对比我现有的文件夹里面diy-part.sh和settings.ini文件有没有更新
#
# REPO_TOKEN密匙制作教程：https://git.io/jm.md
#


name: 同步上游仓库
on:
  workflow_dispatch:
    inputs:
      again-fork:
        description: '[fork-actions]改成[fork],再按[Run workflow]按钮启动,开启同步上游仓库'
        required: false
        default: 'fork-actions'

env:
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  TZ: Asia/Shanghai

jobs:
  del_runs:
    runs-on: Ubuntu-20.04
    name: 同步上游仓库
    
    steps:
    - name: 准备结束
      uses: actions/checkout@v2
      
    - name: 部署环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update > /dev/null 2>&1
        sudo -E apt-get -qq install -y git subversion git-core wget curl grep > /dev/null 2>&1
        sudo timedatectl set-timezone "$TZ"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
          
    - name: 整理数据
      if: env.REPO_TOKEN && (github.event.inputs.again-fork == 'fork')
      run: |
        cd $GITHUB_WORKSPACE
        echo "BILDYML=$(grep "again-fork" -rl ${GITHUB_WORKSPACE}/.github |cut -d "/" -f9)" >> $GITHUB_ENV
        git clone -b main https://github.com/281677160/build-actions.git shangyou
        git clone -b main https://github.com/${{github.repository}}.git repogx
        if [[ -d repogx/build/Lede_source ]];then
          rm -rf shangyou/build/Lede_source/.config
        fi
        if [[ -d repogx/build/Lienol_source ]];then
          rm -fr shangyou/build/Lienol_source/.config
        fi
        if [[ -d repogx/build/Mortal_source ]];then
          rm -fr shangyou/build/Mortal_source/.config
        fi
        if [[ -d repogx/build/Tianling_source ]];then
          rm -fr shangyou/build/Tianling_source/.config
        fi
        if [[ -d repogx/build/openwrt_amlogic ]];then
          rm -fr shangyou/build/openwrt_amlogic/.config
        fi
        if [[ -n "$(ls -A "$GITHUB_WORKSPACE/repogx/.github/workflows/build-openwrt.yml" 2>/dev/null)" ]]; then
          echo "CRON2=$(grep -A 1 'schedule:' repogx/.github/workflows/build-openwrt.yml |awk 'NR==2' |sed 's/^[ ]*//g' |sed s/^#// |sed 's/^[ ]*//g' |cut -d "#" -f1 |sed 's/\//\\&/g' |sed 's/\*/\\&/g')" >> $GITHUB_ENV
          echo "CRON1=$(grep -A 1 'schedule:' shangyou/.github/workflows/build-openwrt.yml |awk 'NR==2' |sed 's/^[ ]*//g' |sed s/^#// |sed 's/^[ ]*//g' |sed 's/\//\\&/g' |sed 's/\*/\\&/g')" >> $GITHUB_ENV
          if [[ `grep 'cron:' repogx/.github/workflows/build-openwrt.yml |sed 's/^[ ]*//g' |grep '^-\ cron'` ]]; then
            sed -i 's/^#\(.*schedule:\)/\1/' shangyou/.github/workflows/build-openwrt.yml
            sed -i 's/^#\(.*- cron:\)/\1/' shangyou/.github/workflows/build-openwrt.yml
          fi
          echo "TARGET1=$(grep 'target: \[' shangyou/.github/workflows/build-openwrt.yml  |sed 's/^[ ]*//g' |grep '^target' |cut -d '#' -f1 |sed 's/\[/\\&/' |sed 's/\]/\\&/')" >> $GITHUB_ENV
          echo "TARGET2=$(grep 'target: \[' repogx/.github/workflows/build-openwrt.yml |sed 's/^[ ]*//g' |grep '^target' |cut -d '#' -f1 |sed 's/\[/\\&/' |sed 's/\]/\\&/')" >> $GITHUB_ENV
          echo "QIDONG1=$(grep -A 1 'paths:' shangyou/.github/workflows/compile.yml |awk 'NR==2' |sed 's/^[ ]*//g' |sed 's/\//\\&/g')" >> $GITHUB_ENV
          echo "QIDONG2=- 'config'" >> $GITHUB_ENV
          echo "TARGE1=$(grep 'target: \[' shangyou/.github/workflows/compile.yml |sed 's/^[ ]*//g' |grep '^target' |cut -d '#' -f1 |sed 's/\[/\\&/' |sed 's/\]/\\&/')" >> $GITHUB_ENV
          echo "TARGE2=$(grep 'target: \[' repogx/.github/workflows/compile.yml |sed 's/^[ ]*//g' |grep '^target' |cut -d '#' -f1 |sed 's/\[/\\&/' |sed 's/\]/\\&/')" >> $GITHUB_ENV
          echo "BEIYONG1=$(grep -A 2 'target:' shangyou/.github/workflows/build-openwrt.yml |grep '\# \[.*\]' | sed -r 's/\# \[(.*)\]/\1/' |sed 's/^[ ]*//g')" >> $GITHUB_ENV
          echo "BEIYONG2=$(grep -A 2 'target:' repogx/.github/workflows/build-openwrt.yml |grep '\# \[.*\]' | sed -r 's/\# \[(.*)\]/\1/' |sed 's/^[ ]*//g')" >> $GITHUB_ENV
          echo "QDMAME1=$(sed -n '1,50p' shangyou/.github/workflows/build-openwrt.yml |grep '^name' |sed 's/\//\\&/g' |sed 's/\*/\\&/g')" >> $GITHUB_ENV
          echo "QDMAME2=$(sed -n '1,50p' repogx/.github/workflows/build-openwrt.yml |grep '^name' |sed 's/\//\\&/g' |sed 's/\*/\\&/g')" >> $GITHUB_ENV
        fi
        
    - name: 同步上游仓库
      if: env.REPO_TOKEN && (github.event.inputs.again-fork == 'fork')
      run: |
        cd $GITHUB_WORKSPACE
        if [[ -n "$(ls -A "$GITHUB_WORKSPACE/repogx/.github/workflows/build-openwrt.yml" 2>/dev/null)" ]]; then
          if [[ -n "${{env.QDMAME1}}" ]] && [[ -n "${{env.QDMAME2}}" ]]; then
            sed -i "s/${{env.QDMAME1}}/${{env.QDMAME2}}/g" shangyou/.github/workflows/build-openwrt.yml
          fi
          if [[ -n "${{env.BEIYONG1}}" ]] && [[ -n "${{env.BEIYONG2}}" ]]; then
            sed -i "s/${{env.BEIYONG1}}/${{env.BEIYONG2}}/g" shangyou/.github/workflows/build-openwrt.yml
          fi
          if [[ -n "${{env.CRON1}}" ]] && [[ -n "${{env.CRON2}}" ]]; then
            sed -i "s/${{env.CRON1}}/${{env.CRON2}}/g" shangyou/.github/workflows/build-openwrt.yml
          fi
          if [[ -n "${{env.TARGET1}}" ]] && [[ -n "${{env.TARGET2}}" ]]; then
            sed -i "s/${{env.TARGET1}}/${{env.TARGET2}}/g" shangyou/.github/workflows/build-openwrt.yml
          fi
          if [[ -n "${{env.TARGE1}}" ]] && [[ -n "${{env.TARGE2}}" ]]; then
            sed -i "s/${{env.TARGE1}}/${{env.TARGE2}}/g" shangyou/.github/workflows/compile.yml
          fi
          if [[ -n "${{env.QIDONG1}}" ]] && [[ -n "${{env.QIDONG2}}" ]]; then
            sed -i "s/${{env.QIDONG1}}/${{env.QIDONG2}}/g" shangyou/.github/workflows/compile.yml
          fi
        fi
        cd repogx
        if [[ -n "$(ls -A "$GITHUB_WORKSPACE/repogx/.github/workflows/compile.yml" 2>/dev/null)" ]]; then
          git rm -rf $GITHUB_WORKSPACE/repogx/.github/workflows/compile.yml
        fi
        cp -Rf $GITHUB_WORKSPACE/shangyou/.github/workflows/compile.yml .github/workflows/compile.yml
        if [[ -n "$(ls -A "$GITHUB_WORKSPACE/repogx/.github/workflows/build-openwrt.yml" 2>/dev/null)" ]]; then
          git rm -rf $GITHUB_WORKSPACE/repogx/.github/workflows/build-openwrt.yml
        fi
        cp -Rf $GITHUB_WORKSPACE/shangyou/.github/workflows/build-openwrt.yml .github/workflows/build-openwrt.yml
        git rm -rf $GITHUB_WORKSPACE/repogx/.github/workflows/${{env.BILDYML}}
        cp -Rf $GITHUB_WORKSPACE/shangyou/.github/workflows/synchronization.yml .github/workflows/synchronization.yml
        if [[ -f build/Lede_source/diy-part.sh ]];then
          cp -Rf build/Lede_source/diy-part.sh build/Lede_source/diy-part.sh.bak
          git rm -rf build/Lede_source/diy-part.sh
        fi
        if [[ -f build/Lienol_source/diy-part.sh ]];then
          cp -Rf build/Lienol_source/diy-part.sh build/Lienol_source/diy-part.sh.bak
          git rm -rf build/Lienol_source/diy-part.sh
        fi
        if [[ -f build/Mortal_source/diy-part.sh ]];then
          cp -Rf build/Mortal_source/diy-part.sh build/Mortal_source/diy-part.sh.bak
          git rm -rf build/Mortal_source/diy-part.sh
        fi
        if [[ -f build/Tianling_source/diy-part.sh ]];then
          cp -Rf build/Tianling_source/diy-part.sh build/Tianling_source/diy-part.sh.bak
          git rm -rf build/Tianling_source/diy-part.sh
        fi
        if [[ -f build/openwrt_amlogic/diy-part.sh ]];then
          cp -Rf build/openwrt_amlogic/diy-part.sh build/openwrt_amlogic/diy-part.sh.bak
          git rm -rf build/openwrt_amlogic/diy-part.sh
        fi
        if [[ -f build/Lede_source/settings.ini ]];then
          cp -Rf build/Lede_source/settings.ini build/Lede_source/settings.ini.bak
          git rm -rf build/Lede_source/settings.ini
        fi
        if [[ -f build/Lienol_source/settings.ini ]];then
          cp -Rf build/Lienol_source/settings.ini build/Lienol_source/settings.ini.bak
          git rm -rf build/Lienol_source/settings.ini
        fi
        if [[ -f build/Mortal_source/settings.ini ]];then
          cp -Rf build/Mortal_source/settings.ini build/Mortal_source/settings.ini.bak
          git rm -rf build/Mortal_source/settings.ini
        fi
        if [[ -f build/Tianling_source/settings.ini ]];then
          cp -Rf build/Tianling_source/settings.ini build/Tianling_source/settings.ini.bak
          git rm -rf build/Tianling_source/settings.ini
        fi
        if [[ -f build/openwrt_amlogic/settings.ini ]];then
          cp -Rf build/openwrt_amlogic/settings.ini build/openwrt_amlogic/settings.ini.bak
          git rm -rf build/openwrt_amlogic/settings.ini
        fi
        cp -Rf $GITHUB_WORKSPACE/shangyou/* ./
        cp -Rf $GITHUB_WORKSPACE/shangyou/.github/workflows/* .github/workflows
        git add .
        git commit -m "同步上游281677160/build-actions于$(date +%Y年%m月%d号%H时%M分%S秒)" |tee build.log
        if [[ `grep -c "Your branch is up to date with" build.log` == '1' ]]; then
          echo "配置文件无更新,所以无需要覆盖!"
        else
          rm -fr build.log
          echo "正在更新${{github.repository}}!"
          git push --quiet "https://${{ secrets.REPO_TOKEN }}@github.com/${{github.repository}}" HEAD:main
          echo "同步完成，请注意查看[diy-part.sh]和[settings.ini]文件的变化和设置好!"
        fi
